#!/bin/bash

# This file implements the K8s FlexVolume Interface
#  for dedicated OpenEBS Storage, using iscsi to 
#  connect to the OpenEBS VSM/Volume. 
#
# This file should be placed in the flexvolume plugin dir 
# on all the  k8s minion nodes
# 
# This version only support two functions:
# - mount : create an VSM if not already present and mount it 
# - unmount : unmount the volume 
#
# Debug mode can be enabled by specifying "debug : 1", in the
#  flexvolume options in the k8s yaml spec file. The logs will
#  be stored under /tmp/logs/openebs-iscsi/openebs-iscsi.log
#
# For interacting with the OpenEBS storage, json/yaml files are used. 
# The exchanged spec files are located in /tmp/openebs/specs
#

#Initialize the logs and specs directory, if not already created
#TBD : Check if this can be moved into the init section
OEBSDEBUG=false
SPECS_DIR="/tmp/openebs/specs"
OLOGS_DIR="/tmp/logs/openebs-iscsi"
CHECK_VOLUME="${OLOGS_DIR}/checkvolumeexists.json"
CREATE_VOLUME="${OLOGS_DIR}/createvolume.json"
DELETE_VOLUME="${OLOGS_DIR}/deletevolume.json"
mkdir -p "${OLOGS_DIR}"
mkdir -p "${SPECS_DIR}"

usage() {
    err "Invalid usage. Usage: "
    err "\t$0 init"
    err "\t$0 mount <mount dir> <json params>"
    err "\t$0 unmount <mount dir>"
    err "\t$0 getvolumename <json params>"
    exit 1
}

#Error response returned to the K8s-FlexVolume
#The response should be a valid json. 
err() {
    echo -ne $* 1>&2
}

#Success response returned to the K8s-FlexVolume
#The response should be a valid json. 
log() {
    echo -ne $* >&1
}

#Dump the debug information into a separate logger
#TBD : Check how to push this information into K8s loggers
debug() {
    if [ ${OEBSDEBUG} ]; then  echo -e $* >>  ${OLOGS_DIR}/openebs-iscsi.log; fi
}


# Print all the arguments into a log file
_printallargs() {
    if [ ${OEBSDEBUG} ]; then
        for i in $*; do
            echo -e $i >>  ${OLOGS_DIR}/openebs-iscsi.log; 
        done
    fi
}

ismounted() {
    MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
    if [ "${MOUNT}" == "${MNTPATH}" ]; then
        echo "1"
    else
        echo "0"
    fi
}

createvolumespec(){
    VOLUMENAME=$1
    VOLUMESIZE=$2

    debug "createvolumespec for ${VOLUMENAME} of size ${VOLUMESIZE}"
    #Clear the previously created volume spec
    #TBD : Handle the case of multiple invocations
    $( clearvolumespec "${VOLUMENAME}" )

    echo -e "---\
kind: PersistentVolumeClaim\n\
apiVersion: v1\n\
metadata:\n\
  name: ${VOLUMENAME}\n\
spec:\n\
  accessModes:\n\
    - ReadWriteOnce\n\
  resources:\n\
    requests:\n\
      storage: ${VOLUMESIZE}\n" > "${SPECS_DIR}/openebs-${VOLUMENAME}-pvc.yaml"

    debug "createvolumespec created - ${SPECS_DIR}/openebs-${VOLUMENAME}-pvc.yaml"

}

clearvolumespec(){
    VOLUMENAME=$1
    debug "clearvolumespec ${VOLUMENAME}"
    sudo rm -rf "${SPECS_DIR}/openebs-${VOLUMENAME}-pvc.yaml"
}

check_volume_status(){
    # check_volume_status method is used to check the status of the volume after it is created.
    # If the status is pending, then it creates a timeout loop of around 100s, within which
    # If the status changes to running, then the timeout period is terminated, or else 
    # If it remains in pending state, after timeout period expires, control passes to the script. 
    i=1
    output=0
    VOLUMENAME=$1   
    OPENEBS_API_URL=$2
        while [ "${i}" -lt 11 ]
        do       
            echo -e "Calling checkvolumeexists. Attempt ${i} of 10" >> "${OLOGS_DIR}/openebs-iscsi.log" 
            status=$(checkvolumeexists "${VOLUMENAME}" "${OPENEBS_API_URL}")
            
            # Pending State
            if [[ "${status}" == 1 ]] ; then
                #VSM in pending state
                echo -e "VSM created, in pending state" >> "${OLOGS_DIR}/openebs-iscsi.log" 
                output=1

            # Complete(Running) State
            elif [[ "${status}" == 2 ]]; then
                # Volume created successfully
                echo -e "VSM created successfully" >> "${OLOGS_DIR}/openebs-iscsi.log" 
                clearvolumespec "${VOLUMENAME}"
                output=2
                break

            # Volume Creation Error. Volume not created. ${status}=0 
            else
                echo -e "Error while creating VSM" >> "${OLOGS_DIR}/openebs-iscsi.log" 
                output=0
            fi
            
            if [ "${i}" == 10 ]; then
               echo "Exceeded number of requests to maya server." >> "${OLOGS_DIR}/openebs-iscsi.log" 
            fi
            
            i=$((i+1))
            sleep 10
        done
    echo $output
}

checkvolumeexists(){
    VOLUMENAME=$1      
    OPENEBS_API_URL=$2     
  
    debug "checkvolumeexists ${VOLUMENAME} ${OPENEBS_API_URL}/volume/info/${VOLUMENAME}"

    # Get curl response as well as HTTP Code
    response=$( curl --write-out %{http_code} --silent --output ${CHECK_VOLUME} \
    "${OPENEBS_API_URL}/volume/info/${VOLUMENAME}" )
    
    if [ "${response}" == "200" ] ; then
        status=$( jq -r '.Status.Reason' ${CHECK_VOLUME} )
    else
        status="unknown"
    fi


    debug "checkvolumeexists - response code ${response} :" 
    debug "checkvolumeexists - response $(cat ${CHECK_VOLUME} )" 
    result=0
    echo "Response in checkvolumeexists is ${response}" >> ${OLOGS_DIR}/openebs-iscsi.log
        # Volume in Pending State
    if [[ "${response}" == "200" ]] && [[ "${status}" == "pending" ]] ; then
        targetportal=$(jq -r '.annotations.targetportal' ${CHECK_VOLUME})
        iqn=$(jq -r '.annotations.iqn' ${CHECK_VOLUME})
        data="${targetportal}\n${iqn}"
        echo -e "${data}" > /tmp/logs/openebs-iscsi/specs.txt
        debug "checkvolumeexists - extracted details $(cat $SPECS_DIR/specs.txt )" 
        echo -e "checkvolumeexists: VSM is in Pending State." >> ${OLOGS_DIR}/openebs-iscsi.log
        result=1

        # Volume in Running State
    elif [[ "${response}" == "200" ]] && [[ "${status}" == "running" ]] ; then
        targetportal=$(jq -r '.annotations.targetportal' ${CHECK_VOLUME})
        iqn=$(jq -r '.annotations.iqn' ${CHECK_VOLUME})
        data="${targetportal}\n${iqn}"
        echo -e "${data}" > /tmp/logs/openebs-iscsi/specs.txt
        debug "checkvolumeexists - extracted details $(cat /tmp/logs/openebs-iscsi/specs.txt )" 
        echo -e "checkvolumeexists: VSM is in Complete State." >> ${OLOGS_DIR}/openebs-iscsi.log
        result=2
    else
        # Volume doesn't exist
        echo -e "checkvolumeexists: Volume Doesn't already exist" >> ${OLOGS_DIR}/openebs-iscsi.log
        result=0
    fi
    echo "${result}"
}

createvolume(){
    VOLUMENAME=$1
    OPENEBS_API_URL=$2
    VOLUMESIZE=$3
    output=0
    # Check if volume already exists
    echo -e "Calling checkvolumeexists from createvolume method" >> ${OLOGS_DIR}/openebs-iscsi.log
    status=$(checkvolumeexists "${VOLUMENAME}" "${OPENEBS_API_URL}")
    
    # if it doesn't exist
    echo -e "Above createvolumespec" >> ${OLOGS_DIR}/openebs-iscsi.log
    $(createvolumespec "${VOLUMENAME}" "${VOLUMESIZE}")

    # Get curl response as well as HTTP Code
    return_code=$( curl --write-out %{http_code} --output ${CREATE_VOLUME} --silent \
     --fail -k -H "Content-Type: application/yaml" -XPOST -d  \
     "$(cat /tmp/openebs/specs/openebs-${VOLUMENAME}-pvc.yaml)" "${OPENEBS_API_URL}/volumes/" )

    output=$( check_volume_status "${VOLUMENAME}" "${OPENEBS_API_URL}" )
    echo $output
}

deletevolume() {
    OPENEBS_API_URL=$1
    VOLUMENAME=$2

    $( curl "${OPENEBS_API_URL}/volume/delete/${VOLUMENAME}" > ${DELETE_VOLUME}) 
    response=$( jq -r '.Status.Reason' ${DELETE_VOLUME})
    if [ "${response}" == "complete" ] ; then
        # Volume Deleted.
        clearvolumespec "${VOLUMENAME}"
        echo 1
    else
        # Error while deleting volume.
        echo 0
    fi
}

domount() {
    #TBD Validate that the required parameters have been obtained.

    MNTPATH="$1"
    DEBUGIN=$(echo "$2" | jq -r '.debug')
    if [ "${DEBUGIN}" == "1" ] ; then
        OEBSDEBUG=true
    fi
    debug "domount $1 $2"
    OPENEBS_API_URL=$(echo "$2" | jq -r '.openebsApiUrl')
    VOLUMENAME=$(echo "$2" | jq -r '.name')
    SIZE=$(echo "$2" | jq -r '.size')

    # Print logs
    debug "domount Mount Path is : $MNTPATH"
    debug "domount OpenEBS API URL: $OPENEBS_API_URL"
    debug "domount Volume Name: $VOLUMENAME"
    debug "domount Volume Size: $SIZE"

    if [ $(ismounted) == 1 ] ; then
        log "{\"status\": \"Success\"}"
        debug "domount volume is already mounted"
        exit 0
    fi
    echo -e "Calling checkvolumeexists from domount method" > ${OLOGS_DIR}/openebs-iscsi.log
    status=$(checkvolumeexists "${VOLUMENAME}" "${OPENEBS_API_URL}")
    status_volume=0
    if [ "${status}" == 0 ] ; then
        # Volume doesn't exist, create Volume
        debug "domount create a new volume at $OPENEBS_API_URL"
        status_volume=$( createvolume "${VOLUMENAME}" "$OPENEBS_API_URL" "${SIZE}" )
        if [[ "${status_volume}" == 0 ]]; then
            echo -e "domount: volume creation failed, status is $status." >> ${OLOGS_DIR}/openebs-iscsi.log
            exit 0
        elif [[ "${status_volume}" == 1 ]]; then
            echo -e "domount: Volume In Pending State $status." >> ${OLOGS_DIR}/openebs-iscsi.log          
            #statements
        elif [[ "${status_volume}" == 2 ]]; then
            echo -e "domount: Volume Created successfully $status." >> ${OLOGS_DIR}/openebs-iscsi.log
        else
            echo -e "domount: Unknown Error." >> ${OLOGS_DIR}/openebs-iscsi.log      
        fi

    # Volume already Created, but is in Pending State
    elif [[ "${status}" -eq 1 ]]; then
        echo -e "Creating a timeout loop" >> ${OLOGS_DIR}/openebs-iscsi.log
        output=$(check_volume_status "${VOLUMENAME}" "${OPENEBS_API_URL}")
    else
        # Volume already created, and is in Success State
        echo -e "domount: volume already created" >> ${OLOGS_DIR}/openebs-iscsi.log
    fi

    # Volume successfully created, get target portal and iqn values.
    # TBD - Add validation to check that the specs exist
    # TBD - Add validation to handle multiple volume creation
    data=($(cat "/tmp/logs/openebs-iscsi/specs.txt"))
    i=0
    for t in "${data[@]}"
    do
        declare "var$i"=$t
        i=$((i+1))
    done
    targetportal="${var0}"
    iqn="${var1}"

    #TBD  - Handle error checks for each of the commands
    debug "domount volume at $targetportal and $iqn"
    debug $(sudo iscsiadm -m discovery -t st -p $targetportal 2>&1)
    debug $(sudo iscsiadm -m node -l -T $iqn -p $targetportal 2>&1)
    devx=$(sudo iscsiadm -m session -P 3 2>&1 |grep -i "Attached scsi disk" | awk '{print $4}')
    debug "devx is $devx"
    # The device can take a few more seconds to appear under /dev
    waiti=0
    while [ "${devx}" == "" ]; do
        sleep 5
        devx=$(sudo iscsiadm -m session -P 3 2>&1 |grep -i "Attached scsi disk" | awk '{print $4}')
        debug "devx is $devx during $waiti"
        waiti=$((waiti+1))
        if [ "${waiti}" == 5 ]; then
                break
        else
                continue
        fi
    done
    debug "domount - mounting iscsi device /dev/$devx as ${MNTPATH}" 
    mkdir -p ${MNTPATH} &> /dev/null
    debug $(sudo mkfs.ext4 -F "/dev/$devx" 2>&1)
    sudo mount "/dev/${devx}" ${MNTPATH} &> /dev/null
    if [ $? -ne 0 ]; then
        2>&1
        err '{ "status": "Failure", "message": "Failed to mount device '${MNTPATH}' , volume_src: '${devx}'"}'
        debug "domount - mount failed iscsi device /dev/$devx as ${MNTPATH}" 
        exit 1
    fi
    debug "domount - mounted iscsi device /dev/$devx as ${MNTPATH}" 
    log '{"status": "Success"}'

    exit 0
}
unmount() {
    MNTPATH=$1
    if [ $(ismounted) -eq 0 ] ; then
      log "{\"status\": \"Success\"}"
      exit 0
    fi

    umount ${MNTPATH} &> "/dev/null"
    if [ $? -ne 0 ]; then
      err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
      exit 1
    fi
    
    #TBD : Add validations
    #Check if the volume exists using iscsiadm sessions
    #Logout of the session for this specific volume 
    volume_name=`basename ${MNTPATH}`
    debug "dounmount volume ${volume_name} and ${MNTPATH}"
    target_iqn=$(sudo iscsiadm -m session | grep ${volume_name} | awk '{print $4}')
    target_portal=$(sudo iscsiadm -m session | grep ${volume_name} | awk '{print $3}' | awk -F ',' '{print $1}')
    debug "dounmount volume with iqn ${target_iqn} and portal ${target_portal}"
    debug $(sudo iscsiadm -m node -u -T ${target_iqn} -p ${target_portal} 2>&1)
    debug $(sudo iscsiadm -m node -o delete -T ${target_iqn} -p ${target_portal} 2>&1)


    log '{"status": "Success"}'
    exit 0
}

getvolumename() {
    _printallargs $*
    VOLUME_NAME=$(echo $1 | jq -r '.name')
    log "{\"status\": \"Success\", \"volumeName\": \"${VOLUME_NAME}\"}"
    exit 0
}


_printallargs $*

op=$1

if [ "$op" = "init" ]; then
    log '{"status": "Success"}'
    exit 0
fi

if [ $# -lt 2 ]; then
    usage
fi

shift

case "$op" in
    mount)
        domount $*
        ;;
    unmount)
        unmount $*
        ;;
    getvolumename)
        getvolumename $*
        ;;
    *)

err "{ \"status\": \"Not supported\" }"
exit 1

esac

exit 1;
